<?xml version="1.0" encoding="UTF-8"?>
<testng-results retried="2" ignored="2" total="5" passed="0" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-09-15T18:13:33 IST" name="Suite1" finished-at="2025-09-15T18:13:59 IST" duration-ms="25726">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:com.framework.runners.TestRunner@5c87bfe2]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2025-09-15T18:13:33 IST" name="Test1" finished-at="2025-09-15T18:13:59 IST" duration-ms="25726">
      <class name="com.framework.runners.TestRunner">
        <test-method is-config="true" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:com.framework.runners.TestRunner@5c87bfe2]" started-at="2025-09-15T18:13:33 IST" name="setUpClass" finished-at="2025-09-15T18:13:34 IST" duration-ms="600" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@743cb8e0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method retried="true" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:com.framework.runners.TestRunner@5c87bfe2]" started-at="2025-09-15T18:13:34 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-09-15T18:13:42 IST" duration-ms="8068" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA["Valid login using Excel data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Login"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at com.framework.stepdefinitions.LoginSteps.user_logs_in_with_excel_sheet(LoginSteps.java:40)
at ✽.user logs in with excel sheet tomsmith and SuperSecretPassword!(file:///C:/Users/Chakr/Downloads/selenium-hybrid-framework/src/test/resources/features/login.feature:7)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method retried="true" signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:com.framework.runners.TestRunner@5c87bfe2]" started-at="2025-09-15T18:13:42 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-09-15T18:13:48 IST" duration-ms="6694" status="SKIP">
          <params>
            <param index="0">
              <value>
                <![CDATA["Valid login using Excel data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Login"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at com.framework.stepdefinitions.LoginSteps.user_logs_in_with_excel_sheet(LoginSteps.java:40)
at ✽.user logs in with excel sheet tomsmith and SuperSecretPassword!(file:///C:/Users/Chakr/Downloads/selenium-hybrid-framework/src/test/resources/features/login.feature:7)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:com.framework.runners.TestRunner@5c87bfe2]" started-at="2025-09-15T18:13:48 IST" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2025-09-15T18:13:54 IST" duration-ms="6031" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Valid login using Excel data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Login"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at com.framework.stepdefinitions.LoginSteps.user_logs_in_with_excel_sheet(LoginSteps.java:40)
at ✽.user logs in with excel sheet tomsmith and SuperSecretPassword!(file:///C:/Users/Chakr/Downloads/selenium-hybrid-framework/src/test/resources/features/login.feature:7)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:com.framework.runners.TestRunner@5c87bfe2]" started-at="2025-09-15T18:13:54 IST" name="tearDownClass" finished-at="2025-09-15T18:13:59 IST" duration-ms="4282" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- com.framework.runners.TestRunner -->
    </test> <!-- Test1 -->
  </suite> <!-- Suite1 -->
</testng-results>
